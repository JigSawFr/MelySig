/*
 * MelySig - Geolocalisation de points d'interets sur vos endroits favoris !
 * MelySig est systeme d'information geographique qui animera vos decouvertes du monde :)
 * Copyright 2014 - melysig.exia-nancy.com
 * Auteurs : Pocecco Julien, Mougenel Gerold, Gaudenot Guillaume & Robert Sebastien.
 */
package fr.melysig.vues;

import fr.melysig.carte.IDrawable;
import fr.melysig.carte.JCanvas;
import fr.melysig.carte.MoveDrawableMouseListener;
import fr.melysig.carte.NonOverlapMoveAdapter;
import fr.melysig.carte.RectangleDrawable;
import fr.melysig.carte.SimpleMouseListener;
import fr.melysig.main.MVC;
import fr.melysig.models.Lieux;
import fr.melysig.models.ListLieux;
import fr.melysig.models.ListPointsInterets;
import fr.melysig.models.ListThemes;
import fr.melysig.models.Parcours;
import fr.melysig.models.PointsInterets;
import fr.melysig.models.Themes;
import fr.melysig.models.Utilisateurs;
import fr.melysig.process.LieuProcess;
import fr.melysig.process.ParcourProcess;
import fr.melysig.process.PointInteretProcess;
import fr.melysig.process.ThemeProcess;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.AbstractListModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.ListModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Coonax
 */
public class ConsultationVue extends javax.swing.JFrame implements Observer {

    private ListThemes listThemes;
    private ListLieux listLieux;
    private Lieux lieux;
    private ConsultationVue consultationVue;
    private static JCanvas monCanvas;
    Dimension dim = new Dimension(20, 20);
    IDrawable rect = new RectangleDrawable(Color.RED, new Point(10, 5), dim);
    private static JTextField txtXPOI = new javax.swing.JTextField();
    private static JTextField txtYPOI = new javax.swing.JTextField();
    MVC monMVC = MVC.obtenirMVC();;
    private SimpleMouseListener simpleMouseListener;
    private MoveDrawableMouseListener moveDrawableMouseListener;
    private NonOverlapMoveAdapter nonOverlapMoveAdapter;

//    private static ConsultationVue gestionConsultation = null;
    /**
     * Creates new form ConsultationVue
     */
    public ConsultationVue(Lieux lieux) {
        this.lieux = lieux;
        
        monCanvas = new JCanvas(lieux);
        consultationVue = this;
        lieux.addObserver(this);
        this.monMVC.monControleurUtilisateur.modele.addObserver(this);
        //Recuperation des themes existant
        listThemes = ThemeProcess.getInstance().getTousThemes();
        listThemes.addObserver(this);
        listLieux = LieuProcess.getInstance().getTousLieux();
        listLieux.addObserver(this);
        //this.monMVC.monUtilisateur.
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        //JOptionPane.showMessageDialog(this, "DEBUG= " + this.monMVC.monUtilisateur.getPseudo());
        this.LabelPseudoConnecter.setText(this.monMVC.monControleurUtilisateur.getPseudo());
        
        update(listThemes, null);
        update(listLieux, null);
        update(lieux.getPointsInterets(), null);
        update(lieux, null);
    }

//    public static ConsultationVue obtenirConsultation() {
//
//        if (gestionConsultation == null) {
//            gestionConsultation = new ConsultationVue();
//        }
//        return gestionConsultation;
//    }
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        PanelHeader = new javax.swing.JPanel();
        logoConnexionUtilisateur = new javax.swing.JLabel();
        LabelCompte = new javax.swing.JLabel();
        LabelPseudoConnecter = new javax.swing.JLabel();
        imageLogin = new javax.swing.JLabel();
        boutonEditionVue = new javax.swing.JButton();
        PanelBody = new javax.swing.JPanel();
        PanelPointInteret = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListPointInteret = new javax.swing.JList();
        labelListPointInteret = new javax.swing.JLabel();
        LabelHistorique = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListHistorique = new javax.swing.JList();
        labelNavigation = new javax.swing.JLabel();
        boutonPointInteretPrecedent = new javax.swing.JButton();
        boutonPointInteretSuivant = new javax.swing.JButton();
        PanelInformationPointInteret = new javax.swing.JPanel();
        labelInformationPointInteret = new javax.swing.JLabel();
        labelLibellePOI = new javax.swing.JLabel();
        labelXPOI = new javax.swing.JLabel();
        labelYPOI = new javax.swing.JLabel();
        labelDescriptionPOI = new javax.swing.JLabel();
        txtLibellePOI = new javax.swing.JTextField();
        //txtYPOI = new javax.swing.JTextField();
        //txtXPOI = new javax.swing.JTextField();
        labelLieuPOI = new javax.swing.JLabel();
        txtLieuPOI = new javax.swing.JTextField();
        labelThemePOI = new javax.swing.JLabel();
        txtThemePOI = new javax.swing.JTextField();
        comboboxThemePOI = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDescriptionPOI = new javax.swing.JTextArea();
        boutonModifierPointInteret = new javax.swing.JButton();
        boutonSupprimerPointInteret = new javax.swing.JButton();
        PanelRecherche = new javax.swing.JPanel();
        labelRecherche = new javax.swing.JLabel();
        txtRecherche = new javax.swing.JTextField();
        ComboRecherche = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        PanelParcours = new javax.swing.JPanel();
        labelParcours = new javax.swing.JLabel();
        labelLibelleParcours = new javax.swing.JLabel();
        txtLibelleParcours = new javax.swing.JTextField();
        labelDescriptionParcours = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtDescriptionParcours = new javax.swing.JTextArea();
        LibellePointInteretParcours = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        listPointsInteretsParcours = new javax.swing.JList();
        labelSelectionParcours = new javax.swing.JLabel();
        ComboboxListParcours = new javax.swing.JComboBox();
        PanelCarte = new javax.swing.JPanel(new BorderLayout());
        PanelCarte.setBackground(Color.WHITE);
        monCanvas.setBackground(new java.awt.Color(169, 169, 169));
        monCanvas.setPreferredSize(new Dimension(706, 734));
        monCanvas.setMinimumSize(new Dimension(706, 734));
        monCanvas.setSize(1700, 890);

        simpleMouseListener = new SimpleMouseListener(monCanvas, lieux);
        moveDrawableMouseListener = new MoveDrawableMouseListener(monCanvas, lieux);
        nonOverlapMoveAdapter = new NonOverlapMoveAdapter(monCanvas, lieux);

        PanelCarte.add(monCanvas, BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Consultation - MelySIG");
        setMinimumSize(new java.awt.Dimension(1400, 934));
        setPreferredSize(new java.awt.Dimension(1400, 934));

        PanelHeader.setBackground(new java.awt.Color(204, 255, 102));

        logoConnexionUtilisateur.setIcon(new javax.swing.ImageIcon("src/fr/melysig/images/logo.png")); // NOI18N

        LabelCompte.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        LabelCompte.setText("Compte :");
        
        txtRecherche.addFocusListener(new FocusListener() {

            @Override
            public void focusGained(FocusEvent fe) {}

            @Override
            public void focusLost(FocusEvent fe) {
                PointInteretProcess.getInstance().filtre(lieux, txtRecherche.getText());
            }
        });

        LabelPseudoConnecter.setText("Pseudo");

        imageLogin.setIcon(new javax.swing.ImageIcon("src/fr/melysig/images/utilisateur.png")); // NOI18N

        boutonEditionVue.setText("Mode Edition");
        boutonEditionVue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditionVue editionVue = new EditionVue(consultationVue, listLieux, listThemes);
                editionVue.setVisible(true);
            }
        });

        javax.swing.GroupLayout PanelHeaderLayout = new javax.swing.GroupLayout(PanelHeader);
        PanelHeader.setLayout(PanelHeaderLayout);
        PanelHeaderLayout.setHorizontalGroup(
                PanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelHeaderLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(logoConnexionUtilisateur)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 987, Short.MAX_VALUE)
                        .addComponent(imageLogin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(PanelHeaderLayout.createSequentialGroup()
                                        .addComponent(LabelCompte)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(LabelPseudoConnecter, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(boutonEditionVue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
        );
        PanelHeaderLayout.setVerticalGroup(
                PanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelHeaderLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(imageLogin)
                                .addGroup(PanelHeaderLayout.createSequentialGroup()
                                        .addGroup(PanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(LabelCompte)
                                                .addComponent(LabelPseudoConnecter))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(boutonEditionVue))
                                .addComponent(logoConnexionUtilisateur))
                        .addContainerGap(11, Short.MAX_VALUE))
        );

        PanelBody.setBackground(new java.awt.Color(230, 230, 230));

        PanelPointInteret.setBackground(new java.awt.Color(255, 255, 255));

        ListPointInteret.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 255)));
        ListPointInteret.setModel(new DefaultListModel());
        ListPointInteret.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ListPointInteretValueChanged(evt,ListPointInteret);
            }
        });
        jScrollPane1.setViewportView(ListPointInteret);
        ListPointInteret.getAccessibleContext().setAccessibleParent(PanelPointInteret);

        labelListPointInteret.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        labelListPointInteret.setText("Points d'Interets disponibles :");

        LabelHistorique.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        LabelHistorique.setText("Historique :");

        ListHistorique.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 153, 255)));
        ListHistorique.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {"Item 1", "Item 2", "Item 3", "Item 4", "Item 5"};

            public int getSize() {
                return strings.length;
            }

            public Object getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane2.setViewportView(ListHistorique);
        ListHistorique.getAccessibleContext().setAccessibleParent(PanelPointInteret);

        labelNavigation.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        labelNavigation.setText("Navigation");

        boutonPointInteretPrecedent.setText("Précédent");
        boutonPointInteretPrecedent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                int index = ListPointInteret.getSelectedIndex();
                // si le premier element de la liste est selectionner on selectionne le dernier
                index = (index == 0) ? ListPointInteret.getModel().getSize() -1 : index -1;
                ListPointInteret.setSelectedIndex(index);
                
            }
        });
        
        

        boutonPointInteretSuivant.setText("Suivant");
        boutonPointInteretSuivant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                int index = ListPointInteret.getSelectedIndex();
                // si le dernier element de la liste est selectionner on selectionne le premier
                index = (index == ListPointInteret.getModel().getSize() -1) ? 0 : index +1;
                ListPointInteret.setSelectedIndex(index);
                
            }
        });

        javax.swing.GroupLayout PanelPointInteretLayout = new javax.swing.GroupLayout(PanelPointInteret);
        PanelPointInteret.setLayout(PanelPointInteretLayout);
        PanelPointInteretLayout.setHorizontalGroup(
                PanelPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelPointInteretLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(PanelPointInteretLayout.createSequentialGroup()
                                        .addGroup(PanelPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(labelListPointInteret)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(PanelPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(PanelPointInteretLayout.createSequentialGroup()
                                                        .addComponent(LabelHistorique, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(0, 0, Short.MAX_VALUE))
                                                .addComponent(jScrollPane2)))
                                .addGroup(PanelPointInteretLayout.createSequentialGroup()
                                        .addComponent(boutonPointInteretPrecedent, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(boutonPointInteretSuivant, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelPointInteretLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelNavigation)
                        .addGap(178, 178, 178))
        );
        PanelPointInteretLayout.setVerticalGroup(
                PanelPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelPointInteretLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(PanelPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelListPointInteret)
                                .addComponent(LabelHistorique))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                                .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelNavigation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(boutonPointInteretPrecedent, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(boutonPointInteretSuivant, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(15, Short.MAX_VALUE))
        );

        PanelInformationPointInteret.setBackground(new java.awt.Color(255, 255, 255));

        labelInformationPointInteret.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        labelInformationPointInteret.setText("Information Point Interet :");

        labelLibellePOI.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        labelLibellePOI.setText("Libelle :");

        labelXPOI.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        labelXPOI.setText("X :");

        labelYPOI.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        labelYPOI.setText("Y :");

        labelDescriptionPOI.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        labelDescriptionPOI.setText("Description :");

        txtLibellePOI.setEditable(true);
        txtLibellePOI.setForeground(new java.awt.Color(0, 153, 255));

        txtYPOI.setEditable(true);
        txtYPOI.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        txtYPOI.setForeground(new java.awt.Color(255, 0, 0));
        txtYPOI.setSelectedTextColor(new java.awt.Color(51, 102, 255));
        txtYPOI.setInputVerifier(new IntVerifier());

        txtXPOI.setEditable(true);
        txtXPOI.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        txtXPOI.setForeground(new java.awt.Color(255, 0, 0));
        txtXPOI.setSelectedTextColor(new java.awt.Color(51, 102, 255));

        labelLieuPOI.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        labelLieuPOI.setText("Lieu :");

        txtLieuPOI.setEditable(true);
        txtLieuPOI.setForeground(new java.awt.Color(0, 153, 255));
        txtLieuPOI.setSelectedTextColor(new java.awt.Color(51, 102, 255));

        labelThemePOI.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        labelThemePOI.setText("Theme :");

        txtThemePOI.setEditable(true);
        txtThemePOI.setForeground(new java.awt.Color(0, 155, 255));
        txtThemePOI.setToolTipText("");
        txtThemePOI.setSelectedTextColor(new java.awt.Color(51, 102, 255));
        comboboxThemePOI.setModel(new javax.swing.DefaultComboBoxModel());

        txtDescriptionPOI.setEditable(true);
        txtDescriptionPOI.setColumns(20);
        txtDescriptionPOI.setForeground(new java.awt.Color(0, 155, 255));
        txtDescriptionPOI.setRows(5);
        txtDescriptionPOI.setToolTipText("");
        txtDescriptionPOI.setSelectedTextColor(new java.awt.Color(51, 102, 255));
        jScrollPane3.setViewportView(txtDescriptionPOI);

        boutonModifierPointInteret.setText("Modifier");
        boutonModifierPointInteret.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                PointsInterets pi = lieux.getPointInteretCourant();
                pi.setLibelle(txtLibellePOI.getText());
                pi.setTheme(ThemeProcess.getInstance().chargerThemes((String)comboboxThemePOI.getSelectedItem()));
                pi.setDescription(txtDescriptionPOI.getText());
                pi.setX(Integer.parseInt(txtXPOI.getText()));
                pi.setY(Integer.parseInt(txtYPOI.getText()));
                PointInteretProcess.getInstance().mettreAjourPointInteret(lieux, pi);
            }
        });
        boutonSupprimerPointInteret.setText("Supprimer");
        boutonSupprimerPointInteret.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                LieuProcess.getInstance().supprimerCurentPointInteret(lieux);
            }
        });

        javax.swing.GroupLayout PanelInformationPointInteretLayout = new javax.swing.GroupLayout(PanelInformationPointInteret);
        PanelInformationPointInteret.setLayout(PanelInformationPointInteretLayout);
        PanelInformationPointInteretLayout.setHorizontalGroup(
                PanelInformationPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelInformationPointInteretLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(PanelInformationPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(labelDescriptionPOI)
                                .addGroup(PanelInformationPointInteretLayout.createSequentialGroup()
                                        .addGroup(PanelInformationPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelInformationPointInteretLayout.createSequentialGroup()
                                                        .addGroup(PanelInformationPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(labelLibellePOI)
                                                                .addComponent(labelLieuPOI))
                                                        .addGap(18, 18, 18))
                                                .addGroup(PanelInformationPointInteretLayout.createSequentialGroup()
                                                        .addComponent(labelThemePOI)
                                                        .addGap(15, 15, 15)))
                                        .addGroup(PanelInformationPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(comboboxThemePOI, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                                                .addComponent(txtLieuPOI, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtLibellePOI, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGroup(PanelInformationPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(PanelInformationPointInteretLayout.createSequentialGroup()
                                                        .addGap(20, 20, 20)
                                                        .addGroup(PanelInformationPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addGroup(PanelInformationPointInteretLayout.createSequentialGroup()
                                                                        .addComponent(labelYPOI)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                        .addComponent(txtYPOI))
                                                                .addGroup(PanelInformationPointInteretLayout.createSequentialGroup()
                                                                        .addComponent(labelXPOI)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                        .addComponent(txtXPOI, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelInformationPointInteretLayout.createSequentialGroup()
                                                        .addGap(26, 26, 26)
                                                        .addComponent(boutonModifierPointInteret, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                                .addComponent(boutonSupprimerPointInteret, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelInformationPointInteretLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelInformationPointInteret)
                        .addGap(130, 130, 130))
        );
        PanelInformationPointInteretLayout.setVerticalGroup(
                PanelInformationPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelInformationPointInteretLayout.createSequentialGroup()
                        .addComponent(labelInformationPointInteret, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelInformationPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelLibellePOI)
                                .addComponent(txtLibellePOI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelYPOI)
                                .addComponent(txtYPOI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelInformationPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelXPOI)
                                .addComponent(txtXPOI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelLieuPOI)
                                .addComponent(txtLieuPOI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelInformationPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelThemePOI)
                                .addComponent(comboboxThemePOI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(boutonModifierPointInteret))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addGroup(PanelInformationPointInteretLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelDescriptionPOI, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(boutonSupprimerPointInteret, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))
        );

        PanelRecherche.setBackground(new java.awt.Color(255, 255, 255));

        labelRecherche.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        labelRecherche.setText("Recherche :");

        ComboRecherche.setModel(new javax.swing.DefaultComboBoxModel());
        ComboRecherche.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent ie) {
                
                if (ie.getStateChange() == ItemEvent.SELECTED) {
                   lieux.deleteObservers();
                   lieux = LieuProcess.getInstance().chargerLieux(ie.getItem().toString());
                   lieux.addObserver(consultationVue);
                   monCanvas.setLieux(lieux);
                   simpleMouseListener.setLieux(lieux);
                   moveDrawableMouseListener.setLieux(lieux);
                   nonOverlapMoveAdapter.setLieux(lieux);
                   
                   consultationVue.update(listThemes, null);
                   consultationVue.update(lieux.getPointsInterets(), null);
                   consultationVue.update(lieux, null);
                   
                   //consultationVue.update(listLieux, null);
                }
            }

          
        });

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel1.setText("Lieu :");

        javax.swing.GroupLayout PanelRechercheLayout = new javax.swing.GroupLayout(PanelRecherche);
        PanelRecherche.setLayout(PanelRechercheLayout);
        PanelRechercheLayout.setHorizontalGroup(
                PanelRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelRechercheLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelRecherche)
                                .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(ComboRecherche, 0, 129, Short.MAX_VALUE)
                                .addComponent(txtRecherche))
                        .addContainerGap(754, Short.MAX_VALUE))
        );
        PanelRechercheLayout.setVerticalGroup(
                PanelRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelRechercheLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PanelRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelRecherche)
                                .addComponent(txtRecherche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelRechercheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ComboRecherche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1))
                        .addContainerGap(7, Short.MAX_VALUE))
        );

        PanelParcours.setBackground(new java.awt.Color(255, 255, 255));

        labelParcours.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        labelParcours.setText("Parcours :");

        labelLibelleParcours.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        labelLibelleParcours.setText("Libelle :");

        txtLibelleParcours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLibelleParcoursActionPerformed(evt);
            }
        });

        labelDescriptionParcours.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        labelDescriptionParcours.setText("Description :");

        txtDescriptionParcours.setColumns(20);
        txtDescriptionParcours.setRows(5);
        jScrollPane4.setViewportView(txtDescriptionParcours);

        LibellePointInteretParcours.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        LibellePointInteretParcours.setText("Points Interets :");

        listPointsInteretsParcours.setModel(new DefaultListModel());
        listPointsInteretsParcours.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ListPointInteretValueChanged(evt, listPointsInteretsParcours);
            }
        });
        jScrollPane5.setViewportView(listPointsInteretsParcours);

        labelSelectionParcours.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        labelSelectionParcours.setText("Sélection :");

        ComboboxListParcours.setModel(new javax.swing.DefaultComboBoxModel());
        ComboboxListParcours.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent ie) {
                
                if (ie.getStateChange() == ItemEvent.SELECTED) {
                   ParcourProcess.getInstance().chargerParcourCourant(consultationVue, lieux, ie.getItem().toString());
                }
            }

          
        });

        javax.swing.GroupLayout PanelParcoursLayout = new javax.swing.GroupLayout(PanelParcours);
        PanelParcours.setLayout(PanelParcoursLayout);
        PanelParcoursLayout.setHorizontalGroup(
                PanelParcoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelParcoursLayout.createSequentialGroup()
                        .addGroup(PanelParcoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(PanelParcoursLayout.createSequentialGroup()
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(labelParcours)
                                        .addGap(12, 12, 12))
                                .addGroup(PanelParcoursLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(PanelParcoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(PanelParcoursLayout.createSequentialGroup()
                                                        .addGroup(PanelParcoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                .addGroup(PanelParcoursLayout.createSequentialGroup()
                                                                        .addComponent(labelLibelleParcours)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                                                        .addComponent(txtLibelleParcours, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PanelParcoursLayout.createSequentialGroup()
                                                                        .addComponent(labelSelectionParcours)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                        .addComponent(ComboboxListParcours, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                                        .addGap(32, 32, 32))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PanelParcoursLayout.createSequentialGroup()
                                                        .addComponent(labelDescriptionParcours)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGroup(PanelParcoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(LibellePointInteretParcours)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33))
        );
        PanelParcoursLayout.setVerticalGroup(
                PanelParcoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelParcoursLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labelParcours)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelParcoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(LibellePointInteretParcours)
                                .addComponent(labelSelectionParcours)
                                .addComponent(ComboboxListParcours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelParcoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(PanelParcoursLayout.createSequentialGroup()
                                        .addGroup(PanelParcoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(labelLibelleParcours)
                                                .addComponent(txtLibelleParcours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(labelDescriptionParcours)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
                                .addComponent(jScrollPane5))
                        .addContainerGap())
        );

        javax.swing.GroupLayout PanelCarteLayout = new javax.swing.GroupLayout(PanelCarte);
        PanelCarte.setLayout(PanelCarteLayout);
        PanelCarteLayout.setHorizontalGroup(
                PanelCarteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 0, Short.MAX_VALUE)
        );
        PanelCarteLayout.setVerticalGroup(
                PanelCarteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PanelBodyLayout = new javax.swing.GroupLayout(PanelBody);
        PanelBody.setLayout(PanelBodyLayout);
        PanelBodyLayout.setHorizontalGroup(
                PanelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(PanelBodyLayout.createSequentialGroup()
                        .addGroup(PanelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(PanelBodyLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(PanelCarte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(PanelRecherche, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(PanelPointInteret, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PanelInformationPointInteret, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PanelParcours, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        PanelBodyLayout.setVerticalGroup(
                PanelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelBodyLayout.createSequentialGroup()
                        .addComponent(PanelPointInteret, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PanelInformationPointInteret, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PanelParcours, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(PanelBodyLayout.createSequentialGroup()
                        .addComponent(PanelRecherche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PanelCarte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(PanelHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(PanelBody, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addComponent(PanelHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PanelBody, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
        //this.setVisible(true);
    }// </editor-fold>                        

    private void boutonPointInteretPrecedentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonPointInteretPrecedentActionPerformed

    }//GEN-LAST:event_boutonPointInteretPrecedentActionPerformed

    private void ListPointInteretValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ListPointInteretValueChanged
//        if (ListPointInteret != null && ListPointInteret.getModel()!= null && ListPointInteret.getModel().getSize() > 0 ) {
//            String poiSelect = (String) ListPointInteret.getModel().getElementAt(evt.getFirstIndex());
//            PointsInterets courant = lieux.getPointInteretCourant();
//            if(  courant == null || poiSelect != null && !poiSelect.equals(courant.getLibelle())) {
//            LieuProcess.getInstance().setCurentPointInteret(lieux, poiSelect);
//        }
//        }
        
    }//GEN-LAST:event_ListPointInteretValueChanged

    private void ListPointInteretValueChanged(javax.swing.event.ListSelectionEvent evt, JList list ) {                                              
        if (list != null && list.getModel()!= null && list.getModel().getSize() > 0 ) {
            String poiSelect = (String) list.getSelectedValue();
            PointsInterets courant = lieux.getPointInteretCourant();
            if(  courant == null || poiSelect != null && !poiSelect.equals(courant.getLibelle())) {
                LieuProcess.getInstance().setCurentPointInteret(lieux, poiSelect);
            }
        }
    }
    
    private void txtLibelleParcoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLibelleParcoursActionPerformed

    }//GEN-LAST:event_txtLibelleParcoursActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultationVue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultationVue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultationVue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultationVue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // new ConsultationVue().setVisible(true);
            }
        });
    }

//    public void updateIHM(int x, int y){
//         txtXPOI.setText(String.valueOf(x));
//         txtYPOI.setText(String.valueOf(y));
//        
//    }
    // Variables declaration - do not modify                     
    private javax.swing.JComboBox ComboRecherche;
    private javax.swing.JComboBox ComboboxListParcours;
    private javax.swing.JLabel LabelCompte;
    private javax.swing.JLabel LabelHistorique;
    private javax.swing.JLabel LabelPseudoConnecter;
    private javax.swing.JLabel LibellePointInteretParcours;
    private javax.swing.JList ListHistorique;
    private javax.swing.JList ListPointInteret;
    private javax.swing.JPanel PanelBody;
    private javax.swing.JPanel PanelCarte;
    private javax.swing.JPanel PanelHeader;
    private javax.swing.JPanel PanelInformationPointInteret;
    private javax.swing.JPanel PanelParcours;
    private javax.swing.JPanel PanelPointInteret;
    private javax.swing.JPanel PanelRecherche;
    private javax.swing.JButton boutonEditionVue;
    private javax.swing.JButton boutonModifierPointInteret;
    private javax.swing.JButton boutonPointInteretPrecedent;
    private javax.swing.JButton boutonPointInteretSuivant;
    private javax.swing.JButton boutonSupprimerPointInteret;
    private javax.swing.JLabel imageLogin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel labelDescriptionPOI;
    private javax.swing.JLabel labelDescriptionParcours;
    private javax.swing.JLabel labelInformationPointInteret;
    private javax.swing.JLabel labelLibellePOI;
    private javax.swing.JLabel labelLibelleParcours;
    private javax.swing.JLabel labelLieuPOI;
    private javax.swing.JLabel labelListPointInteret;
    private javax.swing.JLabel labelNavigation;
    private javax.swing.JLabel labelParcours;
    private javax.swing.JLabel labelRecherche;
    private javax.swing.JLabel labelSelectionParcours;
    private javax.swing.JLabel labelThemePOI;
    private javax.swing.JLabel labelXPOI;
    private javax.swing.JLabel labelYPOI;
    private javax.swing.JList listPointsInteretsParcours;
    private javax.swing.JLabel logoConnexionUtilisateur;
    private javax.swing.JTextArea txtDescriptionPOI;
    private javax.swing.JTextArea txtDescriptionParcours;
    private javax.swing.JTextField txtLibellePOI;
    private javax.swing.JTextField txtLibelleParcours;
    private javax.swing.JTextField txtLieuPOI;
    private javax.swing.JTextField txtRecherche;
    private javax.swing.JTextField txtThemePOI;
    private javax.swing.JComboBox comboboxThemePOI;
    //private javax.swing.JTextField txtXPOI;
    //private javax.swing.JTextField txtYPOI;
    // End of variables declaration                   

    //Méthode qui permet de mettre à jour.
    @Override
    public void update(Observable o, Object arg) {
        //Permet d'obtenir le int en String.
        if (o instanceof Lieux) {
            //récupération du point d'interet courant
            PointsInterets monPointInteret = ((Lieux) o).getPointInteretCourant();
            
            //Mise à jour de la partie information point interet 
                //Verification dans le cas si le point interet est null
            txtXPOI.setText((monPointInteret == null) ? "" : "" + monPointInteret.getX());
            txtYPOI.setText((monPointInteret == null) ? "" : "" + monPointInteret.getY());
            txtDescriptionPOI.setText((monPointInteret == null || monPointInteret.getDescription() == null) ?
                    "" : "" + monPointInteret.getDescription());
            txtLibellePOI.setText((monPointInteret == null) ? "" : "" + monPointInteret.getLibelle());
            txtThemePOI.setText((monPointInteret == null) ? "" : "" + monPointInteret.getTheme().getLibelle());
            if(monPointInteret != null) {
                comboboxThemePOI.setSelectedItem(monPointInteret.getTheme().getLibelle());
            } else if (comboboxThemePOI.getItemCount() > 0){
                comboboxThemePOI.setSelectedIndex(0);
            }
            
            txtLieuPOI.setText((monPointInteret == null) ? "" : "" + monPointInteret.getLieu().getNom());
            
            // mise à jour des informations du parcour courant
            Parcours monParcour = lieux.getParcourCourant();
            txtDescriptionParcours.setText((monParcour == null) ? "" : "" + monParcour.getDescription());
            txtLibelleParcours.setText((monParcour == null) ? "" : "" + monParcour.getLibelle());
            
  //          updateListModele((DefaultListModel) ListPointInteret.getModel(), lieux.getPointsInterets());
            
            
            // clear des points d'interet sur la map
            monCanvas.clear();
            
            listPointsInteretsParcours.clearSelection();
            ListPointInteret.clearSelection();
            
            // si une recherche est en cours alors on affiche les points d'interet retourner par cette recherche
            List<PointsInterets> liste = lieux.getPointsInterets().getList();
            if (lieux.getPointsInteretsFiltre() != null ) {
                liste = lieux.getPointsInteretsFiltre();
            }
            // reconstruction des points d'interets dans la map et la jlist
            for (PointsInterets point : liste) {
                // si le point d'interet construit correspond au point d'interet courant on lui donne une couleur differente des points du parcours ou des autres points du lieu
                if (point.equals(monPointInteret) ) {
                    monCanvas.addDrawable(monCanvas.createPoint(point.getX(), point.getY(), Color.BLUE));
                    //selectionne le point dans la liste des point d'interet du parcourt courant si il existe
                    if (monParcour != null && monParcour.getListPointsInterets().getList().contains(point)) {
                        listPointsInteretsParcours.setSelectedValue(point.getLibelle(), true);
                    }
                    //selectionne le point dans la liste des point d'interet
                    ListPointInteret.setSelectedValue(point.getLibelle(), true);
                } else if (monParcour != null && monParcour.getListPointsInterets().getList().contains(point)){
                    monCanvas.addDrawable(monCanvas.createPoint(point.getX(), point.getY(), Color.GREEN));
                } else {
                    monCanvas.addDrawable(monCanvas.createPoint(point.getX(), point.getY(), Color.RED));
                }
            }
            
            // recherche de l'index de la JList point d'interet correspondant au point d'interet courant
//            DefaultListModel modeleList = ((DefaultListModel)ListPointInteret.getModel());
//            int pos = -1;
//            for (int i=0; monPointInteret != null && (i< modeleList.getSize() || pos >= 0); i++) {
//                if ( modeleList.getElementAt(i).equals(monPointInteret.getLibelle()) ) {
//                    pos = i;
//                }
//            }
//            
//            // selectionne dans la JList le point d'interet courant
//            ListPointInteret.setSelectedIndex(pos);
            
            //a verifier: permeet le rechargement graphique de la frame
            this.validate();

        } else if (o instanceof ListPointsInterets) {
            // clear de la JList de point d'interet
            ((DefaultListModel)ListPointInteret.getModel()).clear();
            // clear de la JList de point d'interet
            ((DefaultListModel)listPointsInteretsParcours.getModel()).clear();
            // mise à jour des informations du parcour courant
            Parcours monParcour = lieux.getParcourCourant();
            
            // si une recherche est en cours alors on affiche les points d'interet retourner par cette recherche
            List<PointsInterets> liste = lieux.getPointsInterets().getList();
            if (lieux.getPointsInteretsFiltre() != null ) {
                liste = lieux.getPointsInteretsFiltre();
            }

            // reconstruction des points d'interets dans la map et la jlist
            for (PointsInterets point : liste) {
               // ajout du point d'interet dans la Jlist des parcours
                if (monParcour != null && monParcour.getListPointsInterets().getList().contains(point)) {
                    ((DefaultListModel)listPointsInteretsParcours.getModel()).addElement(point.getLibelle());
                }
                // ajout du point d'interet dans la Jlist
                ((DefaultListModel)ListPointInteret.getModel()).addElement(point.getLibelle());
            }
        } else if (o instanceof Utilisateurs) {
            //this.monMVC = MVC.obtenirMVC();
            //this.monMVC.toString();
            //JOptionPane.showMessageDialog(this, "DEBUG= " + this.monMVC.monUtilisateur.getPseudo());
            
            //affiche le pseudo de l'utilisateur
            this.LabelPseudoConnecter.setText(this.monMVC.monControleurUtilisateur.getPseudo());
            //this.validate();     
            
        } else if (o instanceof ListThemes ) {
            // clear de la comboBox
            ((DefaultComboBoxModel)ComboboxListParcours.getModel()).removeAllElements();
            ((DefaultComboBoxModel)comboboxThemePOI.getModel()).removeAllElements(); 
            // list tous les themes et l'ajoute dans la combo box
            for (Themes theme : ((ListThemes)o).getList()) {
                ComboboxListParcours.addItem(theme.getLibelle());
                comboboxThemePOI.addItem(theme.getLibelle());
            }
            //récupération du point d'interet courant
            PointsInterets monPointInteret = lieux.getPointInteretCourant();
            if(monPointInteret != null) {
                comboboxThemePOI.setSelectedItem(monPointInteret.getTheme().getLibelle());
            } else if (comboboxThemePOI.getItemCount() > 0){
                comboboxThemePOI.setSelectedIndex(0);
            }
        } else if (o instanceof ListLieux ) {
            // clear de la comboBox
            ((DefaultComboBoxModel)ComboRecherche.getModel()).removeAllElements();  
            // list tous les themes et l'ajoute dans la combo box
            for (Lieux lieu : ((ListLieux)o).getList()) {
                ComboRecherche.addItem(lieu.getNom());
            }
        }

    }
    
//    private void updateListModele(DefaultListModel model, List<PointsInterets> list) {
//        List<String> contenueAAjouter = new ArrayList();
//        for(PointsInterets p : list) {
//            contenueAAjouter.add(p.getLibelle());
//        }
//                
//        for(int i=0 ; i< model.getSize(); i++){
//            
//            if (!contenueAAjouter.contains(model.getElementAt(i))) {
//                model.removeElementAt(i);
//                i--;
//            } else {
//                contenueAAjouter.remove(model.getElementAt(i));
//            }
//        }
//        for (String o : contenueAAjouter) {
//            model.addElement(o);
//        }
//    }
    
    //verificateur des champs de saisie
    class IntVerifier extends InputVerifier {
        public boolean verify(JComponent input) {
            JTextField tf = (JTextField) input;
            String s = tf.getText();
            boolean isDigit = true;
            for(int i=0; i<s.length(); i++) {
                isDigit = isDigit && Character.isDigit(s.charAt(i));
            }
//            for (int i=0;i<s.length();i++)
//                if (!Character.isDigit((s.charAt(i)))) {
//                    tf.setText(String.valueOf(init));
//                    return true;
//                }
//            try {
//                if ((Integer.parseInt(s)>max)||(Integer.parseInt(s)<min))
//                    tf.setText(String.valueOf(init));
//            } catch (Exception e) {
//                tf.setText(String.valueOf(init));
//            }
//            return true;
            return isDigit;
        }

    }
}
